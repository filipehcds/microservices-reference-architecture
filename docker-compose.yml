version: '2'
services:
  config-server:
    image: microservices/config-server:latest
    mem_limit: 1073741824 # RAM 1GB
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    expose:
      - "8888"
    ports:
      - "8888:8888"
    networks:
      - microservices

  eureka-server:
    image: microservices/eureka-server:latest
    mem_limit: 1073741824 # RAM 1GB
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - config-server
    expose:
      - "8761"
    ports:
      - "8761:8761"
    networks:
      - microservices
    restart: "always"

  admin-server:
    image: microservices/admin-server:latest
    mem_limit: 1073741824 # RAM 1GB
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - config-server
    expose:
      - "9000"
    ports:
      - "9000:9000"
    networks:
      - microservices
    restart: "always"

  card-service:
    image: microservices/card-service:latest
    mem_limit: 1073741824 # RAM 1GB
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - config-server
      - eureka-server
    expose:
      - "8082"
    ports:
      - "8082:8082"
    networks:
      - microservices
    restart: "always"

  customer-service:
    image: microservices/customer-service:latest
    mem_limit: 1073741824 # RAM 1GB
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - config-server
      - eureka-server
    expose:
      - "8081"
    ports:
      - "8081:8081"
    networks:
      - microservices
    restart: "always"

  zuul-server:
    image: microservices/zuul-server:latest
    mem_limit: 1073741824 # RAM 1GB
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - config-server
      - eureka-server
      - card-service
      - customer-service
    expose:
      - "8000"
    ports:
      - "8000:8000"
    networks:
      - microservices
    restart: "always"

  hystrix-dashboard:
    image: microservices/hystrix-dashboard:latest
    mem_limit: 1073741824 # RAM 1GB
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - config-server
      - eureka-server
    expose:
      - "7979"
    ports:
      - "7979:7979"
    networks:
      - microservices
    restart: "always"

  zipkin-server:
    image: openzipkin/zipkin:2.12.9
    mem_limit: 1073741824 # RAM 1GB
    expose:
      - "9411"
    ports:
      - "9411:9411"
    networks:
      - microservices
    restart: "always"

  grafana-server:
    image: grafana/grafana:6.1.6
    mem_limit: 1073741824 # RAM 1GB
    expose:
      - "3000"
    ports:
      - "3000:3000"
    networks:
      - microservices
    restart: "always"

  prometheus-server:
    image: prom/prometheus:v2.9.2
    volumes:
     - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml"
    mem_limit: 1073741824 # RAM 1GB
    expose:
      - "9090"
    ports:
      - "9090:9090"
    networks:
      - microservices
    restart: "always"

  elasticsearch:
    image: elasticsearch:7.0.1
    mem_limit: 2147483648
    expose:
      - "9200"
      - "9300"
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      MAX_OPEN_FILES: 65536
    ulimits:
      nofile:
          soft: 65536
          hard: 65536
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - microservices

  logstash:
    image: logstash:7.0.1
    command: logstash -e 'input { tcp { port => 5000 codec => json_lines } } output { elasticsearch { hosts => "elasticsearch:9200" } stdout { codec => rubydebug } }'
    expose:
      - "5000"
    ports:
      - "5000:5000"
    links:
      - elasticsearch
    networks:
      - microservices

  kibana:
    image: kibana:7.0.1
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    expose:
      - "5601"
    ports:
      - "5601:5601"
    links:
      - elasticsearch
    networks:
      - microservices

  mongo:
    image: mongo:4.0.9
    mem_limit: 1073741824 # RAM 1GB
    restart: always
    expose:
      - "27017"
    ports:
      - "27017:27017"
    networks:
      - microservices
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express:0.49
    mem_limit: 1073741824 # RAM 1GB
    restart: always
    expose:
      - "8081"
    ports:
      - "8081:8081"
    networks:
      - microservices
    depends_on:
      - mongo
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example

  h2:
    image: oscarfonts/h2:1.4.197
    mem_limit: 1073741824 # RAM 1GB
    restart: always
    expose:
      - "1521"
      - "81"
    ports:
      - "81:81"
      - "1521:1521"
    networks:
      - microservices

  rabbitmq:
    image: rabbitmq:3.7.14-management
    mem_limit: 1073741824 # RAM 1GB
    restart: always
    expose:
      - "5672"
      - "15672"
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - microservices
    environment:
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "/"

  redis:
    image: redis:5.0.4
    mem_limit: 1073741824 # RAM 1GB
    restart: always
    expose:
      - "6379"
    ports:
      - "6379:6379"
    networks:
      - microservices

  redis-commander:
    image: rediscommander/redis-commander:latest
    mem_limit: 1073741824 # RAM 1GB
    restart: always
    expose:
      - "8081"
    ports:
      - "8081:8081"
    networks:
      - microservices
    depends_on:
      - redis
    environment:
      REDIS_HOSTS: "local:redis:6379"

  neo4j:
    image: neo4j:3.5.5
    mem_limit: 1073741824 # RAM 1GB
    restart: always
    expose:
      - "7687"
      - "7474"
    ports:
      - "7687:7687"
      - "7474:7474"
    networks:
      - microservices

  cassandra:
    image: cassandra:3.11.4
    mem_limit: 1073741824 # RAM 1GB
    restart: always
    expose:
      - "9042"
    ports:
      - "9042:9042"
    networks:
      - microservices

  zookeeper:
    image: 'bitnami/zookeeper:3.4.14'
    expose:
      - "2181"
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - microservices

  kafka:
    image: 'bitnami/kafka:2.2.0'
    expose:
      - "9092"
    ports:
      - '9092:9092'
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - microservices
    # POST para http://localhost:9000/kafka/publish?message=OiFilipe
    # cadastrar o container name no hosts apontando pra 127.0.0.1
    # cd /opt/bitnami/kafka/bin
    # kafka-topics.sh --create --zookeeper zookeeper:2181 --topic users --partitions 1 --replication-factor 1
    # kafka-topics.sh --describe --zookeeper zookeeper:2181 --topic users

  jenkins:
    image: 'jenkins/jenkins:2.164.2-jdk11'
    mem_limit: 1073741824 # RAM 1GB
    restart: always
    expose:
      - "8080"
      - "50000"
    ports:
      - '8080:8080'
      - '50000:50000'
    networks:
      - microservices

  consul:
    image: 'consul:1.5.0'
    mem_limit: 1073741824 # RAM 1GB
    restart: always
    expose:
      - "8301"
      - "8400"
      - "8500"
      - "8600"
    ports:
      - "8301:8301"
      - "8400:8400"
      - "8500:8500"
      - "8600:53/udp"
    environment:
      - "CONSUL_LOCAL_CONFIG={\"disable_update_check\": true}"
      - "CONSUL_BIND_INTERFACE=eth0"
    networks:
      - microservices
    #command: 
      #- "agent -retry-join consul-server-bootstrap -client 0.0.0.0"
    # Criar Key/Value [/config/myApp/my/prop]
    # Artigo em https://www.baeldung.com/spring-cloud-consul

networks:
  microservices:
    driver: bridge